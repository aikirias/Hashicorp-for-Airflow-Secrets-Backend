x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: Dockerfile
  env_file:
    - ./config/airflow.env
  user: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./config:/opt/airflow/config
    - ./vault-agent/output:/opt/airflow/vault-agent
  networks:
    - airflow

services:
  postgres-airflow:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-airflow-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      retries: 5
      timeout: 5s
    networks:
      - airflow

  demo-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: demo
    volumes:
      - demo-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      timeout: 5s
    networks:
      - airflow

  demo-db-bootstrap:
    image: postgres:15
    depends_on:
      demo-db:
        condition: service_healthy
    environment:
      PGPASSWORD: postgres
    volumes:
      - ./scripts:/scripts
    entrypoint: ["/bin/sh", "-c", "/scripts/bootstrap_demo_db.sh"]
    networks:
      - airflow

  vault:
    image: hashicorp/vault:1.15
    command: vault server -dev -dev-root-token-id=root -dev-listen-address=0.0.0.0:8200 -log-level=info
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root
      VAULT_ADDR: http://0.0.0.0:8200
    volumes:
      - vault-data:/vault/data
      - ./vault:/vault/custom
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      retries: 10
      start_period: 10s
      timeout: 5s
    networks:
      - airflow

  vault-setup:
    image: hashicorp/vault:1.15
    depends_on:
      vault:
        condition: service_healthy
      demo-db:
        condition: service_healthy
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: root
    volumes:
      - ./scripts:/scripts
      - ./vault:/vault/custom
      - ./vault-agent:/vault-agent
    entrypoint: ["/bin/sh", "-c"]
    command: ["/scripts/init_vault.sh"]
    networks:
      - airflow

  vault-agent:
    image: hashicorp/vault:1.15
    depends_on:
      vault-setup:
        condition: service_completed_successfully
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: root
    volumes:
      - ./vault-agent:/vault-agent
      - ./vault-agent/output:/vault-agent/output
    user: "0:0"
    command: vault agent -config=/vault-agent/config.hcl
    networks:
      - airflow

  airflow-init:
    <<: *airflow-common
    command: >
      bash -c "airflow db migrate &&
               airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com &&
               airflow connections add demo_postgres --conn-uri postgresql://postgres:postgres@demo-db:5432/demo || true"
    depends_on:
      postgres-airflow:
        condition: service_healthy
      vault-setup:
        condition: service_completed_successfully
      demo-db-bootstrap:
        condition: service_completed_successfully
      vault-agent:
        condition: service_started
    restart: "no"

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres-airflow:
        condition: service_healthy
      vault-agent:
        condition: service_started
      demo-db-bootstrap:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres-airflow:
        condition: service_healthy
      vault-agent:
        condition: service_started
      demo-db-bootstrap:
        condition: service_completed_successfully

volumes:
  postgres-airflow-data:
  demo-db-data:
  vault-data:

networks:
  airflow:
